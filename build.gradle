import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
  repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://central.sonatype.com/repository/maven-snapshots/' }
//    mavenLocal()
    google()
  }
  dependencies {
    classpath "io.github.fourlastor:construo:2.0.1"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "org.jlleitschuh.gradle:ktlint-gradle:12.1.1"
  }
}

plugins {
  id "application"
}

apply plugin: 'io.github.fourlastor.construo'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'kotlin'
apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

import io.github.fourlastor.construo.Target

version = "$liftoffVersion"
mainClassName = 'gdx.liftoff.Main'
java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8
kotlin.compilerOptions.jvmTarget.set(JvmTarget.JVM_1_8)

def appName = "gdx-liftoff"
def jarName = "$appName-${version}.jar"

jar {
  manifest {
    attributes (
      // Enabling native access is good for JARs run by Java 24 or later.
      'Main-Class' : mainClassName, 'Enable-Native-Access': 'ALL-UNNAMED'
    )
  }
  archiveFileName.set(jarName)
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/freebsd/**')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**', 'META-INF/freebsd/**')
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

repositories {
  mavenCentral()
  maven { url 'https://central.sonatype.com/repository/maven-snapshots/' }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  maven { url 'https://jitpack.io' }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
  implementation "org.apache.commons:commons-exec:$commonsExecVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation "com.crashinvaders.lml:gdx-kiwi:$lmlVersion"
  implementation "com.crashinvaders.lml:gdx-lml:$lmlVersion"
  implementation("com.crashinvaders.lml:gdx-lml-vis:$lmlVersion"){ exclude group: "com.kotcrab.vis", module: "vis-ui" }
  implementation "com.crashinvaders.lml:gdx-autumn:$lmlVersion"
  implementation "com.crashinvaders.lml:gdx-autumn-mvc:$lmlVersion"
  implementation "com.crashinvaders.lml:gdx-autumn-desktop-fcs:$lmlVersion"
  //noinspection GDXOutdatedVersionGradleGroovy
  implementation "com.kotcrab.vis:vis-ui:$visUiVersion" // for stable releases
//  implementation "com.github.kotcrab.vis-ui:vis-ui:$visUiVersion" // for JitPack commits
  implementation "com.github.raeleus.TenPatch:tenpatch:5.2.3"
  implementation "com.github.raeleus.stripe:stripe:2.0.0"
  implementation "com.rafaskoberg.gdx:typing-label:1.4.0"


  //noinspection GDXOutdatedVersionGradleGroovy
  implementation "com.badlogicgames.gdx:gdx:$gdxVersion"

  // Increases downloaded executable size, but may allow it to run in more places.
  implementation "com.badlogicgames.gdx:gdx-lwjgl3-angle:$gdxVersion"

  implementation ("com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"){
    exclude group: "org.jcraft", module: "jorbis"
    exclude group: "org.lwjgl", module: "lwjgl-openal"

//    exclude group: 'org.lwjgl', module: 'lwjgl-glfw'
//    exclude group: 'org.lwjgl', module: 'lwjgl-opengl'
//    exclude group: 'org.lwjgl', module: 'lwjgl-stb'
//    exclude group: 'org.lwjgl', module: 'lwjgl'
//    exclude group: 'org.lwjgl', module: 'lwjgl-jemalloc'
  }

//  implementation "org.lwjgl:lwjgl-jemalloc:$lwjgl3Version"
//  implementation "org.lwjgl:lwjgl-glfw:$lwjgl3Version"
//  implementation "org.lwjgl:lwjgl-openal:$lwjgl3Version"
//  implementation "org.lwjgl:lwjgl-opengl:$lwjgl3Version"
//  implementation "org.lwjgl:lwjgl-stb:$lwjgl3Version"
//  implementation "org.lwjgl:lwjgl:$lwjgl3Version"
//// Linux //
//  implementation "org.lwjgl:lwjgl-jemalloc:$lwjgl3Version:natives-linux"
//  implementation "org.lwjgl:lwjgl-jemalloc:$lwjgl3Version:natives-linux-arm32"
//  implementation "org.lwjgl:lwjgl-jemalloc:$lwjgl3Version:natives-linux-arm64"
//  implementation "org.lwjgl:lwjgl-glfw:$lwjgl3Version:natives-linux"
//  implementation "org.lwjgl:lwjgl-glfw:$lwjgl3Version:natives-linux-arm32"
//  implementation "org.lwjgl:lwjgl-glfw:$lwjgl3Version:natives-linux-arm64"
//  implementation "org.lwjgl:lwjgl-openal:$lwjgl3Version:natives-linux"
//  implementation "org.lwjgl:lwjgl-openal:$lwjgl3Version:natives-linux-arm32"
//  implementation "org.lwjgl:lwjgl-openal:$lwjgl3Version:natives-linux-arm64"
//  implementation "org.lwjgl:lwjgl-opengl:$lwjgl3Version:natives-linux"
//  implementation "org.lwjgl:lwjgl-opengl:$lwjgl3Version:natives-linux-arm32"
//  implementation "org.lwjgl:lwjgl-opengl:$lwjgl3Version:natives-linux-arm64"
//  implementation "org.lwjgl:lwjgl-stb:$lwjgl3Version:natives-linux"
//  implementation "org.lwjgl:lwjgl-stb:$lwjgl3Version:natives-linux-arm32"
//  implementation "org.lwjgl:lwjgl-stb:$lwjgl3Version:natives-linux-arm64"
//  implementation "org.lwjgl:lwjgl:$lwjgl3Version:natives-linux"
//  implementation "org.lwjgl:lwjgl:$lwjgl3Version:natives-linux-arm32"
//  implementation "org.lwjgl:lwjgl:$lwjgl3Version:natives-linux-arm64"
//
//  // MacOS //
//
//  implementation "org.lwjgl:lwjgl-jemalloc:$lwjgl3Version:natives-macos"
//  implementation "org.lwjgl:lwjgl-jemalloc:$lwjgl3Version:natives-macos-arm64"
//  implementation "org.lwjgl:lwjgl-glfw:$lwjgl3Version:natives-macos"
//  implementation "org.lwjgl:lwjgl-glfw:$lwjgl3Version:natives-macos-arm64"
//  implementation "org.lwjgl:lwjgl-openal:$lwjgl3Version:natives-macos"
//  implementation "org.lwjgl:lwjgl-openal:$lwjgl3Version:natives-macos-arm64"
//  implementation "org.lwjgl:lwjgl-opengl:$lwjgl3Version:natives-macos"
//  implementation "org.lwjgl:lwjgl-opengl:$lwjgl3Version:natives-macos-arm64"
//  implementation "org.lwjgl:lwjgl-stb:$lwjgl3Version:natives-macos"
//  implementation "org.lwjgl:lwjgl-stb:$lwjgl3Version:natives-macos-arm64"
//  implementation "org.lwjgl:lwjgl:$lwjgl3Version:natives-macos"
//  implementation "org.lwjgl:lwjgl:$lwjgl3Version:natives-macos-arm64"
//
//
//  // Windows //
//
//  implementation "org.lwjgl:lwjgl-jemalloc:$lwjgl3Version:natives-windows"
//  implementation "org.lwjgl:lwjgl-glfw:$lwjgl3Version:natives-windows"
//  implementation "org.lwjgl:lwjgl-openal:$lwjgl3Version:natives-windows"
//  implementation "org.lwjgl:lwjgl-opengl:$lwjgl3Version:natives-windows"
//  implementation "org.lwjgl:lwjgl-stb:$lwjgl3Version:natives-windows"
//  implementation "org.lwjgl:lwjgl:$lwjgl3Version:natives-windows"
//  implementation "org.lwjgl:lwjgl-jemalloc:$lwjgl3Version:natives-windows-x86"
//  implementation "org.lwjgl:lwjgl-glfw:$lwjgl3Version:natives-windows-x86"
//  implementation "org.lwjgl:lwjgl-openal:$lwjgl3Version:natives-windows-x86"
//  implementation "org.lwjgl:lwjgl-opengl:$lwjgl3Version:natives-windows-x86"
//  implementation "org.lwjgl:lwjgl-stb:$lwjgl3Version:natives-windows-x86"
//  implementation "org.lwjgl:lwjgl:$lwjgl3Version:natives-windows-x86"
//
//  implementation "org.lwjgl:lwjgl-nfd:$nfdVersion"
//  implementation "org.lwjgl:lwjgl-nfd:$nfdVersion:natives-windows"
//  implementation "org.lwjgl:lwjgl-nfd:$nfdVersion:natives-windows-x86"
//  implementation "org.lwjgl:lwjgl-nfd:$nfdVersion:natives-linux"
//  implementation "org.lwjgl:lwjgl-nfd:$nfdVersion:natives-linux-arm32"
//  implementation "org.lwjgl:lwjgl-nfd:$nfdVersion:natives-linux-arm64"
//  implementation "org.lwjgl:lwjgl-nfd:$nfdVersion:natives-macos"
//  implementation "org.lwjgl:lwjgl-nfd:$nfdVersion:natives-macos-arm64"


  implementation("org.lwjgl:lwjgl-nfd:$nfdVersion"){ exclude group: 'org.lwjgl', module: 'lwjgl' }
  implementation("org.lwjgl:lwjgl-nfd:$nfdVersion:natives-windows"){ exclude group: 'org.lwjgl', module: 'lwjgl' }
  implementation("org.lwjgl:lwjgl-nfd:$nfdVersion:natives-windows-x86"){ exclude group: 'org.lwjgl', module: 'lwjgl' }
  implementation("org.lwjgl:lwjgl-nfd:$nfdVersion:natives-linux"){ exclude group: 'org.lwjgl', module: 'lwjgl' }
  implementation("org.lwjgl:lwjgl-nfd:$nfdVersion:natives-linux-arm32"){ exclude group: 'org.lwjgl', module: 'lwjgl' }
  implementation("org.lwjgl:lwjgl-nfd:$nfdVersion:natives-linux-arm64"){ exclude group: 'org.lwjgl', module: 'lwjgl' }
  implementation("org.lwjgl:lwjgl-nfd:$nfdVersion:natives-macos"){ exclude group: 'org.lwjgl', module: 'lwjgl' }
  implementation("org.lwjgl:lwjgl-nfd:$nfdVersion:natives-macos-arm64"){ exclude group: 'org.lwjgl', module: 'lwjgl' }


  // necessary because the current gdx-autumn-desktop-fcs has an implementation dep on this, and we need it here.
  implementation "io.github.lukehutch:fast-classpath-scanner:2.21"
  // for some network requests, such as checking the versions of dependencies
  implementation "com.github.kittinunf.fuel:fuel:2.3.1"

  implementation "org.slf4j:slf4j-nop:2.0.5"

  // This is the same as the "official" mvnrepository-client version 2.0.2, but with dependencies updated to avoid vulnerabilities.
  // It is here in a comment in case MvnRepository's search starts working again...
//  implementation 'com.github.tommyettinger:mvnrepository-client:v2.0.2.4'
}
// Builds a JAR that only includes the files needed to run on macOS, not Windows or Linux.
// The file size for a Mac-only JAR is about 7MB smaller than a cross-platform JAR.
tasks.register("jarMac") {
  dependsOn("jar")
  group("build")
  jar.archiveFileName.set("${appName}-${version}-mac.jar")
  jar.exclude("windows/x86/**", "windows/x64/**", "linux/arm32/**", "linux/arm64/**", "linux/x64/**", "**/*.dll", "**/*.so",
    'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    jar.exclude("windows/x86/**", "windows/x64/**", "linux/arm32/**", "linux/arm64/**", "linux/x64/**",
      'META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
}

// Builds a JAR that only includes the files needed to run on Linux, not Windows or macOS.
// The file size for a Linux-only JAR is about 5MB smaller than a cross-platform JAR.
tasks.register("jarLinux") {
  dependsOn("jar")
  group("build")
  jar.archiveFileName.set("${appName}-${version}-linux.jar")
  jar.exclude("windows/x86/**", "windows/x64/**", "macos/arm64/**", "macos/x64/**", "**/*.dll", "**/*.dylib",
    'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    jar.exclude("windows/x86/**", "windows/x64/**", "macos/arm64/**", "macos/x64/**",
      'META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
}

// Builds a JAR that only includes the files needed to run on x64 Windows, not Linux or macOS.
// The file size for a Windows-only JAR is about 4MB smaller than a cross-platform JAR.
tasks.register("jarWin") {
  dependsOn("jar")
  group("build")
  jar.archiveFileName.set("${appName}-${version}-win.jar")
  jar.exclude("macos/arm64/**", "macos/x64/**", "linux/arm32/**", "linux/arm64/**", "linux/x64/**", "**/*.dylib", "**/*.so",
    'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA',
    "windows/x86/**", "gdx.dll"
  )
  dependencies {
    jar.exclude("macos/arm64/**", "macos/x64/**", "linux/arm32/**", "linux/arm64/**", "linux/x64/**",
      'META-INF/INDEX.LIST', 'META-INF/maven/**',
      "windows/x86/**", "gdx.dll")
  }
}

construo {
  // name of the executable
  name.set(appName)
  // human-readable name, used for example in the `.app` name for macOS
  humanName.set(appName)

  jlink {
    includeDefaultCryptoModules.set(false) // we don't need any encryption in Liftoff itself.
  }
  targets.configure {
    register("linuxX64", Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_linux_hotspot_17.0.15_6.tar.gz")
    }
    register("macM1", Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.15_6.tar.gz")
      // macOS needs an identifier
      identifier.set("com.libgdx.liftoff." + appName)
      // Optional: icon for macOS
      macIcon.set(file("icons/logo.icns"))
    }
    register("macX64", Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_mac_hotspot_17.0.15_6.tar.gz")
      // macOS needs an identifier
      identifier.set("com.libgdx.liftoff." + appName)
      // Optional: icon for macOS
      macIcon.set(file("icons/logo.icns"))
    }
    register("winX64", Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      icon.set(file("icons/gdx-liftoff.png"))
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_windows_hotspot_17.0.15_6.zip")
    }
  }
}

// I can't figure this out for now...
// We only need the platform-specific JAR when making a platform-specific Construo build.
// But, Construo currently can't figure out the modules for jlink when given any other jarTask.

//tasks.register("construoWin") {
//  construo.jarTask.set("jarWin")
//  dependsOn("packageWinX64")
//}

distributions {
  main {
    contents {
      into('lib') {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.getName() != project.tasks.jar.outputs.files.singleFile.name
        }.each { file ->
          exclude file.name
        }
      }
    }
  }
}

startScripts.dependsOn('jar')
startScripts.classpath = project.tasks.jar.outputs.files

tasks.register('sample', JavaExec) {
  dependsOn classes
  setDescription("Generates a sample libGDX project into build/dist/sample")
  mainClass.set("gdx.liftoff.Sample")
  setClasspath(sourceSets.main.runtimeClasspath)
}

jar.dependsOn('ktlintFormat')
